{'TMP': 'C:\\Users\\theboss\\AppData\\Local\\Temp', 'COMPUTERNAME': 'DESKTOP-USJO84J', 'USERDOMAIN': 'DESKTOP-USJO84J', 'PSMODULEPATH': 'C:\\WINDOWS\\system32\\WindowsPowerShell\\v1.0\\Modules\\', 'COMMONPROGRAMFILES': 'C:\\Program Files\\Common Files', 'PROCESSOR_IDENTIFIER': 'Intel64 Family 6 Model 78 Stepping 3, GenuineIntel', 'VBOX_MSI_INSTALL_PATH': 'C:\\Program Files\\Oracle\\VirtualBox\\', 'CYGWIN': 'mintty', 'PROCESSOR_REVISION': '4e03', 'SYSTEMROOT': 'C:\\WINDOWS', 'PATH': 'C:\\ProgramData\\Oracle\\Java\\javapath;C:\\Program Files (x86)\\Intel\\iCLS Client\\;C:\\Program Files\\Intel\\iCLS Client\\;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;c:\\Program Files\\Intel\\IntelSGXPSW\\bin\\x64\\Release\\;c:\\Program Files\\Intel\\IntelSGXPSW\\bin\\win32\\Release\\;C:\\Program Files (x86)\\Intel\\Intel(R) Management Engine Components\\DAL;C:\\Program Files\\Intel\\Intel(R) Management Engine Components\\DAL;C:\\Program Files (x86)\\Intel\\Intel(R) Management Engine Components\\IPT;C:\\Program Files\\Intel\\Intel(R) Management Engine Components\\IPT;C:\\Program Files\\Intel\\WiFi\\bin\\;C:\\Program Files\\Common Files\\Intel\\WirelessCommon\\;C:\\Program Files (x86)\\OpenSSH\\bin;C:\\Program Files\\OpenSSH\\bin;C:\\Program Files\\Git\\cmd;C:\\Program Files\\Git\\mingw64\\bin;C:\\Program Files\\Git\\usr\\bin;C:\\Users\\theboss\\AppData\\Local\\Programs\\Python\\Python36\\Scripts\\;C:\\Users\\theboss\\AppData\\Local\\Programs\\Python\\Python36\\;C:\\Users\\theboss\\AppData\\Local\\Microsoft\\WindowsApps', 'PROGRAMFILES(X86)': 'C:\\Program Files (x86)', 'TEMP': 'C:\\Users\\theboss\\AppData\\Local\\Temp', 'COMMONPROGRAMFILES(X86)': 'C:\\Program Files (x86)\\Common Files', 'PROCESSOR_ARCHITECTURE': 'AMD64', 'ALLUSERSPROFILE': 'C:\\ProgramData', 'USERPROFILE': 'C:\\Users\\theboss', 'LOCALAPPDATA': 'C:\\Users\\theboss\\AppData\\Local', 'HOMEPATH': '\\Users\\theboss', 'USERDOMAIN_ROAMINGPROFILE': 'DESKTOP-USJO84J', 'PROGRAMW6432': 'C:\\Program Files', 'USERNAME': 'theboss', 'LOGONSERVER': '\\\\DESKTOP-USJO84J', 'PROMPT': '$P$G', 'COMSPEC': 'C:\\WINDOWS\\system32\\cmd.exe', 'PROGRAMDATA': 'C:\\ProgramData', 'ONEDRIVE': 'C:\\Users\\theboss\\OneDrive', 'PATHEXT': '.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC', 'WINDIR': 'C:\\WINDOWS', 'UOIPME_REG_PATH': 'C:\\Program Files\\Intel Corporation\\USB over IP', 'APPDATA': 'C:\\Users\\theboss\\AppData\\Roaming', 'HOMEDRIVE': 'C:', 'SYSTEMDRIVE': 'C:', 'NUMBER_OF_PROCESSORS': '4', 'PROCESSOR_LEVEL': '6', 'COMMONPROGRAMW6432': 'C:\\Program Files\\Common Files', 'OS': 'Windows_NT', 'PUBLIC': 'C:\\Users\\Public', 'PROGRAMFILES': 'C:\\Program Files'}